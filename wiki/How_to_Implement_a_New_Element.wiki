#labels Featured,Phase-Implementation
This document gives you the guidelines how to implement a new element/component.
=How to Implement a New Element/Component=

= Introduction =

This document gives you the guidelines how to implement a new element/component for the Java2Word project.

_For this java2word library, "Paragraph" is not an Element - it is Style. Consider this only a simple demonstration how to implement something in this framework.

_

= Details =

Imagine you want to use one component and this component does not exist yet. A good example could be the "Lists", which hasn't been done yet (27-Mar-2011). But for this exercise we will use "Paragraph". 

Lets define steps how to implement this "Paragraph"(or any other) component.

==If you are not a  "committer" in this project or submit the code by attaching the changed classes to the issue==


==Set up your Development Environment==

  * Check out those projects *j2w-ejb* and optionally *j2w-webtest*
  * In the j2w-ejb directory, run: *"mvn clean install"*
  
This is it! Simple like that!

If you use eclipse, run "mvn eclipse:eclipse" in order to import the project to it.
  
Optionally, after a successful build, you can take a look at your .m2 folder and you should be able to see the generated jar in : ~/.m2/repository/java2word/j2w-ejb/1.0/j2w-ejb-1.0.jar 


== Code development ==

Now you will see that there is no mystery behind *Java2word* library. 

  * Create your class called *Paragraph.java* implementing the interface  *IElement.java*.
  * Also create a test class called *ParagraphTest.java*
  * Preferable, first write your test in the class 
  * Write the code of the method is *getContent()*. This method has to return the contend ready to be added to the document.

  
I assume you don't know what to write in your *getContent()* right? Now it is time to do the *reverse engineering* and figure out how to implement the code to generate a *Paragraph* block.
 
  * Open your Microsoft Word 2004 (or greater then)
  * Type some text, select part of the text.
  * Save it as "Word 2003 XML Document"
  * Open using any text editor or XML indent. I use those websites: [http://xmlindent.com/ http://xmlindent.com/] and [http://www.shell-tools.net/index.php?op=xml_format http://www.shell-tools.net/index.php?op=xml_format]

  * Don't worry about the huge generated XML. The important right now bit is between *<w:body>* and *</w:body>*


At this point you can see something like:

{{{
... more stuff, don't worry now...

<w:body>
	<w:p wsp:rsidR="00D711DA" wsp:rsidRDefault="00FE5527">
		<w:r>
			<w:t>Leonardo </w:t>
		</w:r>
	</w:p>
<w:body>

... more stuff don't worry now...
}}}

Now we know how to implement the *Paragraph* component!!!

  * Following the development guidelines, you will use implement the interface *IFluentElement<Paragraph>*. This interface will force you to implement a method called "create()". 

  * In order to start the *fluent flow*, you will have to create another static method called *with(String)*. It doesn't have to be "with" but something that starts the flow.

{{{
public static Paragraph with(String value) {
    this.value = value //actual paragraph content
    return new Paragraph();
}
}}}

Notice that the method is very simple and only returns a new reference to the Paragraph object. *You should also make the constructor private in order to force the use of the fluent interface*.

  * After, I could have a variable with the *place holder*. 
{{{
String PARAGRAPH_TEMPLATE = 
	"<w:r wsp:rsidRPr=\"00FE5527\">"
	+ "\n		<w:r>"
	+"\n			{styleText}"
	+"\n			<w:t>{value}</w:t>"
	+"\n		</w:r>";
	"</w:r>";
}}}

For convention, we use a place holder for the actual paragraph content ({value}). 

__We will talk about the other place holder ({styleText}) later.__

  * Time to replace the place holder and return the *getContent()*; 
{{{

  public String getContent() {
     return PARAGRAPH_TEMPLATE.replace("{value}", this.value);   
  }

}}}

  * And I would utilize like that:

{{{
   IDocument myDoc = new Document2004();
   myDoc.addEle(Paragraph.with("Leonardo").create()) );
}}}

Time to create your *Unit Tests* (or TDD, up to you).

  * Create a class *ParagraphTest.java* and extend Assert. This is one example of unit test:

{{{
    @Test
    public void sanityTestParagraph() {
        IElement par = Paragraph.with("par01").withStyle().align(Align.CENTER).create();

       assertEquals(1, TestUtils.regexCount(par.getContent(), <w:t>par01</w:t>"));
       assertEquals(1, TestUtils.regexCount(par.getContent(), "<w:p wsp:rsidR="));
       assertEquals(2, TestUtils.regexCount(par.getContent(), "<*w:r>"));
       assertEquals(1, TestUtils.regexCount(par.getContent(), "</w:p>"));
       assertEquals(2, TestUtils.regexCount(par.getContent(), "<*w:pPr>"));
    }
}}}
  

  Not finished yet, you need to know if your new element really works in a real Microsoft Word document.

  * In your unit test, create a Document2004
  * Add one paragraph with some bold text. Eg.: 

{{{
   IDocument myDoc = new Document2004();
   myDoc.getBody().addEle( new Paragraph2004("Leonardo" + new Bold2004("Correa")) );
}}}

  * Print out (just for a while) the *myDoc.getContent()*, copy the result to your clip board.


  * Go to: http://localhost:8080/j2w (which is part of your development environment) and paste in the textarea.
 
  * Click in the button to download, save the *whatever.doc* anywhere in your local machine.

  * Open the document with Microsoft Word 2003+ and see your bold text!


_Remember to run the *"Code Metrics"* task in Ant and see the *Cobertura* report. Your code should have at least 90% test coverage. Please refer to *"Code quality*, guidelines" Section in the main page of this project_

This was just a demonstration how to create a new element in this API. I haven't implemented this yet.  



<br><br>


Leonardo Correa
 